#!/usr/bin/env python3

import random
from tkinter import *
import pygame
from tkinter.font import *
from tkinter.messagebox import *

# -- GLOBAL VARIABLES -- #

roles = {"Loup Garou": True, "Loup Garou blanc": True, "Grand méchant loup": False, "Infect père des loups": True, "Loup amnésique": True, "Simple villageois": True, "Voyante": True, "Chasseur": True, "Cupidon": True, "Sorcière": True, "Petite fille": True, "Voleur": True, "Salvateur": True, "Idiot du village": True, "Bouc émissaire": True, "Ancien": True, "Joueur de flûte": True, "Corbeau": True, "Enfant sauvage": True, "Renard": True, "Soeur": True, "Montreur d'ours": True, "Chien loup": True, "Chevalier à l'épée rouillée": True}

# ---------------------- #

class Game(object):

    player_list = []
    player_roles = {}
    game_info = {"Couple": [], "Loups": [], "Enchantés": [], "Maitre": "NULL", "Modèle": "NULL", "Protected": "NULL", "Soeurs": []}
    game_options = {"VoyanteBavarde":False, "VoyanteBavardePer":0, "Couple":"Couple classique", "Taux LGB":1, "TauxAssassin":1, "SorcièreNoKill":False, "SorcièreNoRaise":False, "JDFenchant":1, "WinAnge":1, "CompoCachée":False}

    fenetre = 0

    window = Tk()
    font_title = Font(root=window, family="Times", size=24, weight="bold", slant="italic")
    font_copyright = Font(root=window, family="Times", size=8, slant="italic")
    font_options = Font(root=window, family="Times", size=15, slant="italic")

    def __init__(self):
        self.window.title("Loup Garou 1.0")
        self.window.geometry("1200x800+150+150")
        self.window.resizable(0, 0)

        self.main_menu()

        self.window.mainloop()

    def main_menu(self):
        for c in self.window.winfo_children():
            c.destroy()

        title = Label(self.window, text="Loup Garou", font=self.font_title, fg="red")
        launch = Button(self.window, text="Jouer", command=self.play_menu)
        options = Button(self.window, text="Options", command=self.options_menu)
        leave = Button(self.window, text="Quitter", command=self.window.destroy)
        cpyright = Label(self.window, text="© 2019 Cyril Grosjean", font=self.font_copyright, fg="grey")

        title.place(x=520, y=10)
        launch.place(x=420, y=200, width=400, height=40)
        options.place(x=420, y=300, width=400, height=40)
        leave.place(x=420, y=400, width=400, height=40)
        cpyright.place(x=5, y=780)

    def play_menu(self):
        pass

    def options_menu(self):
        global roles

        for c in self.window.winfo_children():
            c.destroy()

        compo_list = []
        for i in roles.keys():
            compo_list.append(i)
        del compo_list[compo_list.index("Simple villageois")]
        del compo_list[compo_list.index("Loup Garou")]
        title = Label(self.window, text="Loup Garou", font=self.font_title, fg="red")

        # - Activer / Désactiver rôles

        self.select_roles_var = StringVar()
        self.select_roles_var.set("Loup Garou blanc")
        select_roles = OptionMenu(self.window, self.select_roles_var, *compo_list, command=self.toggle_label_func)
        toggle_button = Button(self.window, text="Activer / Désactiver", command=self.toggle_role)
        self.toggle_label = Label(self.window, text="Activé", fg="green", font=self.font_options)

        # - Voyante bavarde ou non + chances de bavardage

        self.voy_bavarde_var = IntVar()
        self.voy_bavarde_var.set(0)
        voy_bavarde = Checkbutton(self.window, text="Voyante bavarde", variable=self.voy_bavarde_var)
        luck_bavar_label = Label(self.window, text="Chances de bavardage (en %)")
        self.luck_bavar = Spinbox(self.window, from_=0, to=100)

        # - Type de couple

        self.couple_var = StringVar()
        self.couple_var.set("Couple classique")
        couple = OptionMenu(self.window, self.couple_var, "Couple classique", "Couple composé du cupidon", "Couple aléatoire", "Pas de couple")
        couple_label = Label(self.window, text="Type de couple")

        # - Taux de réveil du LGB

        lgb_label = Label(self.window, text="Réveil du Loup Garou Blanc")
        self.taux_lgb = Spinbox(self.window, from_=1, to=5, command=self.toggle_lgb_taux)
        self.lgb_label1 = Label(self.window, text="Toutes les 1 nuit(s)")

        # - Taux de réveil de l'assassin

        assassin_label = Label(self.window, text="Réveil de l'assassin")
        self.taux_assassin = Spinbox(self.window, from_=1, to=5, command=self.toggle_assassin_taux)
        self.assassin_label1 = Label(self.window, text="Toutes les 1 nuit(s)")

        # - Options sorcière

        self.witch_kill_var = IntVar()
        self.witch_kill_var.set(0)
        witch_kill_time = Checkbutton(self.window, text="La sorcière ne peut pas tuer la première nuit", variable=self.witch_kill_var)
        self.witch_raise_var = IntVar()
        self.witch_raise_var.set(0)
        witch_raise_time = Checkbutton(self.window, text="La sorcière ne peut pas réanimer la première nuit", variable=self.witch_raise_var)

        # - Options joueur de flûte

        enchant_label = Label(self.window, text="Nombre de joueurs à enchanter par nuit")
        self.nb_enchant = Spinbox(self.window, from_=1, to=5, command=self.toggle_jdf_taux)
        self.nb_enchant_label = Label(self.window, text="1 joueur(s) enchanté(s) par nuit")

        # - Options ange

        self.ange_label = Label(self.window, text="L'ange peut gagner si voté avant le jour 1")
        self.ange_spin = Spinbox(self.window, from_=1, to=3, command=self.toggle_ange_taux)

        # - Compo cachée

        self.compo_var = IntVar()
        self.compo_var.set(0)
        compo_check = Checkbutton(self.window, text="Composition cachée", variable=self.compo_var)

        # - END

        save = Button(self.window, text="Enregistrer et fermer", command=self.save_options)
        back = Button(self.window, text="Retour", command=self.main_menu)

        title.place(x=520, y=10)
        select_roles.place(x=50, y=100, width=300, height=40)
        self.toggle_label.place(x=150, y=150)
        toggle_button.place(x=360, y=100, width=200, height=40)
        voy_bavarde.place(x=600, y=110)
        luck_bavar_label.place(x=800, y=100)
        self.luck_bavar.place(x=800, y=125)
        couple_label.place(x=150, y=200)
        couple.place(x=50, y=230, width=300, height=40)
        lgb_label.place(x=450, y=200)
        self.taux_lgb.place(x=450, y=230)
        self.lgb_label1.place(x=470, y=260)
        assassin_label.place(x=770, y=200)
        self.taux_assassin.place(x=750, y=230)
        self.assassin_label1.place(x=770, y=260)
        witch_kill_time.place(x=50, y=340)
        witch_raise_time.place(x=50, y=370)
        enchant_label.place(x=460, y=320)
        self.nb_enchant.place(x=500, y=350)
        self.nb_enchant_label.place(x=480, y=380)
        self.ange_label.place(x=800, y=320)
        self.ange_spin.place(x=840, y=350)
        compo_check.place(x=490, y=430)
        save.place(x=380, y=550, width=400, height=40)
        back.place(x=380, y=600, width=400, height=40)

    def save_options(self):
        # - GET VARIABLES

        var_good = True

        voy_bav = self.voy_bavarde_var.get()
        luck_voy = int(self.luck_bavar.get())
        couple = self.couple_var.get()
        lgb = int(self.taux_lgb.get())
        assassin = int(self.taux_assassin.get())
        witch_kill = int(self.witch_kill_var.get())
        witch_raise = int(self.witch_raise_var.get())
        nb_enchants = int(self.nb_enchant.get())
        ange = int(self.ange_spin.get())
        compo = int(self.compo_var.get())

        # - CHECK VARIABLES

        if voy_bav < 0 or voy_bav > 1 or luck_voy < 0 or luck_voy > 100:
            var_good = False
        elif lgb < 1 or lgb > 5 or assassin < 1 or assassin > 5 or witch_kill < 0 or witch_kill > 1:
            var_good = False
        elif witch_raise < 0 or witch_raise > 1 or nb_enchants < 1 or nb_enchants > 5:
            var_good = False
        elif ange < 1 or ange > 3 or compo < 0 or compo > 1:
            var_good = False

        if not var_good:
            showerror("Loup Garou", "Les paramètres entrés sont incorrects !")
            self.options_menu()
        else:

        # - DEL GLOBAL VARIABLES

            del self.voy_bavarde_var
            del self.select_roles_var
            del self.toggle_label
            del self.luck_bavar
            del self.couple_var
            del self.taux_lgb
            del self.lgb_label1
            del self.taux_assassin
            del self.assassin_label1
            del self.witch_kill_var
            del self.witch_raise_var
            del self.nb_enchant
            del self.nb_enchant_label
            del self.ange_label
            del self.ange_spin
            del self.compo_var

        # - SET

            if voy_bav == 1:
                self.game_options["VoyanteBavarde"] = True
            else:
                self.game_options["VoyanteBavarde"] = False
            self.game_options["VoyanteBavardePer"] = luck_voy
            self.game_options["Couple"] = couple
            self.game_options["Taux LGB"] = lgb
            self.game_options["TauxAssassin"] = assassin
            if witch_kill == 1:
                self.game_options["SorcièreNoKill"] = True
            else:
                self.game_options["SorcièreNoKill"] = False
            if witch_raise == 1:
                self.game_options["SorcièreNoRaise"] = True
            else:
                self.game_options["SorcièreNoRaise"] = False
            self.game_options["JDFenchant"] = nb_enchants
            self.game_options["WinAnge"] = ange
            if compo == 1:
                self.game_options["CompoCachée"] = True
            else:
                self.game_options["CompoCachée"] = False

            showinfo("Loup Garou", "Les paramètres ont bien été sauvegardés !")
            self.main_menu()

    def toggle_ange_taux(self):
        self.ange_label.config(text="L'ange peut gagner si voté avant le jour " + str(self.ange_spin.get()))

    def toggle_jdf_taux(self):
        self.nb_enchant_label.config(text=str(self.nb_enchant.get()) + " joueur(s) enchanté(s) par nuit")

    def toggle_assassin_taux(self):
        self.assassin_label1.config(text="Toutes les " + str(self.taux_assassin.get()) + " nuit(s)")

    def toggle_lgb_taux(self):
        self.lgb_label1.config(text="Toutes les " + str(self.taux_lgb.get()) + " nuit(s)")

    def toggle_role(self):
        global roles

        if roles.get(self.select_roles_var.get()):
            self.toggle_label.config(text="Désactivé", fg="red")
            roles[self.select_roles_var.get()] = False
        else:
            self.toggle_label.config(text="Activé", fg="green")
            roles[self.select_roles_var.get()] = True

    def toggle_label_func(self, event):
        global roles

        if roles.get(self.select_roles_var.get()):
            self.toggle_label.config(text="Activé", fg="green")
        else:
            self.toggle_label.config(text="Désactivé", fg="red")


Game()